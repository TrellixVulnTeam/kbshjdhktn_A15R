import keyboards as kb
import os
import sys
from bot import bot
import db
from utils import RegRequest, RegProject


import process


from datetime import datetime
from aiogram.types import InputMediaPhoto, ParseMode, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified
from aiogram.utils.markdown import text, bold, link


m_text = ''


async def process_start(message):
    try:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–∏—Å–∫–æ–≤–∏–∫ \"–û–∫—Å—é–º–æ—Ä–æ–Ω\"! \n"
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",
                             reply_markup=kb.menu_kb)
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)


async def message_handle(message):
    try:
        if message.text in ["–ü–æ–∏—Å–∫ –ü—Ä–æ–µ–∫—Ç–∞ –ø–æ –ó–∞–ø—Ä–æ—Å—É", "–ü–æ–∏—Å–∫ –ó–∞–ø—Ä–æ—Å–∞ –ø–æ –ü—Ä–æ–µ–∫—Ç—É"]:
            if message.text == "–ü–æ–∏—Å–∫ –ü—Ä–æ–µ–∫—Ç–∞ –ø–æ –ó–∞–ø—Ä–æ—Å—É":
                await RegRequest.year_state.set()
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥: ", reply_markup=kb.cancel_kb)
            else:
                await RegProject.name_state.set()
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ", reply_markup=kb.cancel_kb)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é")
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)


async def request_year_step(message, state, edit=False):
    try:
        msg = message.text
        msg = msg[0].upper() + msg[1:]
        await state.update_data(year=msg)
        await RegRequest.request_theme_state.set()
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞:")

    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)


async def request_theme_step(message, state, edit=False):
    try:
        msg = message.text
        msg = msg[0].upper() + msg[1:]
        await state.update_data(theme=msg)
        await RegRequest.functional_requester_state.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞:")

    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)


async def functional_requester_step(message, state, edit=False):
    try:
        msg = message.text
        msg = msg[0].upper() + msg[1:]
        await state.update_data(requester=msg)
        user_data = await state.get_data()
        print(str(user_data))

        await bot.send_message(message.from_user.id, "–°–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
        # await bot.send_message(message.from_user.id, process.rating_by_words_projects(user_data['theme'].split()),
        #                        reply_markup=kb.menu_kb)
        await bot.send_document(document=open(process.rating_by_words_projects(user_data['theme'])+'.xlsx', 'rb'),
                                chat_id=message.from_user.id,
                                reply_markup=kb.menu_kb)
        await state.finish()

    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)


async def cancel_state(message, state):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüóø", reply_markup=kb.menu_kb)
            await state.finish()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(e, exc_type, file_name, exc_tb.tb_lineno)
